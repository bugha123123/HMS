@using HMS.Interface
@model List<Appointment>
@inject IDoctorService _docservice;
<script src="https://unpkg.com/lucide@latest"></script>

@{
    var appointments = await _docservice.GetAppointments();
    var currentPage = ViewBag.CurrentPage;
    var totalPages = ViewBag.TotalPages;
    var when = Context.Request.Query["when"];
}

<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Search and Filter -->
    <div class="mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0">
        <form method="get" action="@Url.Action("Index", "Doctor")" class="flex space-x-4">
            <!-- Date Picker -->
            <input type="date" id="searchDate" name="when" class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
            <button type="submit" class="px-4 py-2 rounded-lg text-sm font-medium bg-blue-600 text-white">Search</button>
        </form>

        <div class="flex space-x-2">
            <button id="todayBtn" class="px-4 py-2 rounded-lg text-sm font-medium bg-blue-600 text-white">Today</button>
            <button id="upcomingBtn" class="px-4 py-2 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-100">Upcoming</button>
        </div>
    </div>
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <!-- Total Appointments -->
        <div class="bg-white p-6 rounded-lg shadow-sm">
            <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900">Total Appointments</h3>
                <i data-lucide="calendar" class="h-6 w-6 text-blue-600"></i>
            </div>
            <p class="text-3xl font-bold text-gray-900 mt-2">
                @appointments.Count()
            </p>
            <p class="text-sm text-gray-500 mt-1">All Appointments</p>
        </div>

        <!-- Pending Appointments -->
        <div class="bg-white p-6 rounded-lg shadow-sm">
            <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900">Pending</h3>
                <i data-lucide="clock" class="h-6 w-6 text-yellow-600"></i>
            </div>
            <p class="text-3xl font-bold text-gray-900 mt-2">
                @appointments.Count(a => a.Status == AppointmentStatus.Pending)
            </p>
            <p class="text-sm text-gray-500 mt-1">Needs Attention</p>
        </div>

        <!-- Accepted Appointments -->
        <div class="bg-white p-6 rounded-lg shadow-sm">
            <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900">Accepted</h3>
                <i data-lucide="check-circle" class="h-6 w-6 text-green-600"></i>
            </div>
            <p class="text-3xl font-bold text-gray-900 mt-2">
                @appointments.Count(a => a.Status == AppointmentStatus.Scheduled)
            </p>
            <p class="text-sm text-gray-500 mt-1">Confirmed</p>
        </div>

        <!-- Completed Appointments -->
        <div class="bg-white p-6 rounded-lg shadow-sm">
            <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900">Completed</h3>
                <i data-lucide="check-square" class="h-6 w-6 text-blue-600"></i>
            </div>
            <p class="text-3xl font-bold text-gray-900 mt-2">
                @appointments.Count(a => a.Status == AppointmentStatus.Completed)
            </p>
            <p class="text-sm text-gray-500 mt-1">Completed Appointments</p>
        </div>
    </div>

    <!-- Stats -->
    <!-- (No changes required here) -->
    <!-- Appointments List -->
    <div id="appointmentsList" class="bg-white rounded-lg shadow-sm overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-lg font-semibold text-gray-900">Appointments</h2>
        </div>
        <div id="appointmentsContainer" class="divide-y divide-gray-200">
            <!-- Default Today Appointments -->
            @if (Model == null || !Model.Any())
            {
                <div class="p-6">
                    <p class="text-center text-gray-500">No appointments for today.</p>
                </div>
            }

            else
            {
                @foreach (var appointment in Model)
                {
                    <div class="p-6 hover:bg-gray-50">
                        <div class="flex items-center justify-between space-x-4">
                            <div class="flex items-center space-x-4">
                                <div class="h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center shadow-md">
                                    <i data-lucide="user" class="h-6 w-6 text-gray-600"></i>
                                </div>
                                <div>
                                    <h3 class="text-lg font-semibold text-gray-900 truncate max-w-[200px]">
                                        @(appointment.Patient?.Email ?? "No Email")
                                    </h3>
                                    <div class="flex items-center space-x-2 text-sm text-gray-500">
                                        <i data-lucide="calendar" class="h-4 w-4"></i>
                                        <span>@appointment.AppointmentDate.ToString("MMM dd, yyyy")</span>
                                        <i data-lucide="clock" class="h-4 w-4 ml-2"></i>
                                        <span>@appointment.AppointmentTime</span>
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center space-x-2">
                                <span class="px-3 py-1 rounded-full text-sm font-semibold bg-green-100 text-green-800">
                                    @appointment.Status
                                </span>
                            </div>
                        </div>
                        <div class="mt-4 space-y-2">
                            <p class="text-sm text-gray-600">Reason: <span class="font-medium text-gray-800">@appointment.Reason</span></p>
                            <!-- Schedule Appointment Button -->
                            @if (appointment.Status == AppointmentStatus.Pending)
                            {
                                <form method="post" action="@Url.Action("ScheduleAppointment", "Doctor", new { appointmentId = appointment.Id })">
                                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg">Schedule</button>
                                </form>
                            }
                            @if (appointment.Status == AppointmentStatus.Scheduled)
                            {
                                <form method="get" action="@Url.Action("RescheduleAppointment", "Doctor", new { appointmentId = appointment.Id })">
                                    <button type="submit" class="px-4 py-2 bg-yellow-500 text-white rounded-lg">Reschedule</button>
                                </form>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Pagination Controls -->
    <div class="mt-6 flex justify-between items-center">
        <div>
            <span class="text-sm text-gray-500">Page @currentPage of @totalPages</span>
        </div>
        <div class="flex space-x-4">
            @if (currentPage > 1)
            {
                <a href="@Url.Action("Index", "Doctor", new { page = currentPage - 1, when = when })" class="px-4 py-2 bg-blue-600 text-dark rounded-lg">Previous</a>
            }

            @if (currentPage < totalPages)
            {
                <a href="@Url.Action("Index", "Doctor", new { page = currentPage + 1, when = when })" class="px-4 py-2 bg-blue-600 text-dark rounded-lg">Next</a>
            }
        </div>
    </div>
</main>


<script>
  
    lucide.createIcons();
</script>